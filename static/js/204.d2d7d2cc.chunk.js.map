{"version":3,"file":"static/js/204.d2d7d2cc.chunk.js","mappings":"gPAOMA,GAAcC,EAAAA,EAAAA,GAAgB,IAuBpC,GAAeC,EAAAA,EAAAA,GAA8B,CAC3CC,KAAM,2BADR,EAjBI,SAAAC,GACF,OACEC,EAAAA,EAAAA,MAAA,QAAMC,SAAUF,EAAMG,aAAaC,SAAA,EACjCC,EAAAA,EAAAA,KAAA,OAAAD,UACGE,EAAAA,EAAAA,IACC,qBACA,iBACA,CAACC,EAAAA,EAAUX,GACXY,EAAAA,OAGJH,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,aAIhB,I,UC5BA,GAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,0BCahL,EARwC,SAAAJ,GACtC,OACEK,EAAAA,EAAAA,KAAA,OAAKI,UAAWC,EAAEC,OAAS,IAAMD,EAAEE,OAAOR,UACxCC,EAAAA,EAAAA,KAACQ,EAAAA,GAAO,CAACC,GAAE,WAAAC,OAAaf,EAAMgB,IAAKZ,SAAEJ,EAAMiB,QAGjD,ECLA,EAHqC,SAAAjB,GACnC,OAAOK,EAAAA,EAAAA,KAAA,OAAKI,UAAWC,EAAEQ,QAAQd,SAAEJ,EAAMkB,SAC3C,ECkCA,EA1BwC,SAAAlB,GACtC,IAAMmB,EAAQnB,EAAMoB,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OACzCnB,EAAAA,EAAAA,KAACoB,EAAU,CAACR,KAAMO,EAAEP,KAAMD,GAAIQ,EAAER,IAASQ,EAAER,GAAM,IAG7CU,EAAmBP,EAAMQ,SAASJ,KAAI,SAAAK,GAAC,OAC3CvB,EAAAA,EAAAA,KAACwB,EAAO,CAACX,QAASU,EAAEV,SAAcU,EAAEZ,GAAM,IAM5C,OACEf,EAAAA,EAAAA,MAAA,OAAKQ,UAAWC,EAAEY,QAAQlB,SAAA,EACxBC,EAAAA,EAAAA,KAAA,OAAKI,UAAWC,EAAEoB,aAAa1B,SAAEiB,KACjCpB,EAAAA,EAAAA,MAAA,OAAKQ,UAAWC,EAAEiB,SAASvB,SAAA,EACzBC,EAAAA,EAAAA,KAAA,OAAAD,SAAMsB,KACNrB,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAC0B,EAAc,CAAC7B,SATF,SAAC8B,GACrBhC,EAAMiC,YAAYD,EAAOE,eAC3B,WAYF,EC1BA,GAAeC,EAAAA,EAAAA,KACbC,EAAAA,EAAAA,KAPsB,SAACjB,GACvB,MAAO,CACLC,YAAaD,EAAMC,YAEvB,IAGyBiB,EAAAA,EAAAA,GAAA,GAAOC,EAAAA,IAC9BC,EAAAA,EAFF,CAGEC,E,mICXIC,EAA6B,SAACtB,GAAmB,MAAM,CAC3DuB,OAAQvB,EAAMwB,KAAKD,OACpB,EAKM,SAASH,EACdK,GAkBA,OATuCR,EAAAA,EAAAA,IAMrCK,EACA,CAAC,EAPoCL,EALnC,SAAApC,GACF,IAAQ0C,EAAyB1C,EAAzB0C,OAAWG,GAASC,EAAAA,EAAAA,GAAK9C,EAAK+C,GACtC,OAAKL,GACErC,EAAAA,EAAAA,KAACuC,GAAgBP,EAAAA,EAAAA,GAAA,GAAMQ,KADVxC,EAAAA,EAAAA,KAAC2C,EAAAA,GAAQ,CAAClC,GAAI,UAEpC,GAWF,C","sources":["components/Dialogs/AddMessageForm/AddMessageForm.tsx","webpack://react-1/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Dialogs.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["import { InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport {\r\n  maxLenthCreator,\r\n  required,\r\n} from \"../../../utils/validators/validators\";\r\nimport { Textarea, createField } from \"../../common/FomsControls/FormsControls\";\r\nimport { NewMessageFormType } from \"../Dialogs\";\r\nconst maxLength50 = maxLenthCreator(50);\r\n\r\ntype NewMessageFormValuesTypeKeys = Extract<keyof NewMessageFormType, string>;\r\ntype PropsType = {};\r\nconst AddMessageForm: React.FC<\r\n  InjectedFormProps<NewMessageFormType, PropsType> & PropsType\r\n> = props => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        {createField<NewMessageFormValuesTypeKeys>(\r\n          \"Enter your message\",\r\n          \"newMessageBody\",\r\n          [required, maxLength50],\r\n          Textarea\r\n        )}\r\n      </div>\r\n      <div>\r\n        <button>Send</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\nexport default reduxForm<NewMessageFormType>({\r\n  form: \"dialog-add-message-form\",\r\n})(AddMessageForm);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__MvfVz\",\"dialogsItems\":\"Dialogs_dialogsItems__wgbzJ\",\"active\":\"Dialogs_active__jmu0Y\",\"messages\":\"Dialogs_messages__2Fh1N\",\"message\":\"Dialogs_message__9DV5Z\"};","import { NavLink } from \"react-router-dom\";\r\nimport s from \"../Dialogs.module.css\";\r\ntype PropsType = {\r\n  id: number;\r\n  name: string;\r\n};\r\nconst DialogItem: React.FC<PropsType> = props => {\r\n  return (\r\n    <div className={s.dialog + \" \" + s.active}>\r\n      <NavLink to={`/dialog/${props.id}`}>{props.name}</NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DialogItem;\r\n","import s from \"../Dialogs.module.css\";\r\ntype PropsType = {\r\n  message: string;\r\n};\r\nconst Message: React.FC<PropsType> = props => {\r\n  return <div className={s.message}>{props.message}</div>;\r\n};\r\nexport default Message;\r\n","import { initialStateType } from \"../../redux/dialogs-reducer\";\r\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport Message from \"./Message/Dialogs\";\r\ntype OwnPropsType = {\r\n  dialogsPage: initialStateType;\r\n  sendMessage: (messageTExt: string) => void;\r\n};\r\n\r\nexport type NewMessageFormType = {\r\n  newMessageBody: string;\r\n};\r\n\r\nconst Dialogs: React.FC<OwnPropsType> = props => {\r\n  const state = props.dialogsPage;\r\n\r\n  const dialogsElements = state.dialogs.map(d => (\r\n    <DialogItem name={d.name} id={d.id} key={d.id} />\r\n  ));\r\n\r\n  const messagesElements = state.messages.map(m => (\r\n    <Message message={m.message} key={m.id} />\r\n  ));\r\n\r\n  const addNewMessage = (values: NewMessageFormType) => {\r\n    props.sendMessage(values.newMessageBody);\r\n  };\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItems}>{dialogsElements}</div>\r\n      <div className={s.messages}>\r\n        <div>{messagesElements}</div>\r\n        <div>\r\n          <AddMessageForm onSubmit={addNewMessage} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Dialogs;\r\n","import { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { actions } from \"../../redux/dialogs-reducer\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\nimport Dialogs from \"./Dialogs\";\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n  };\r\n};\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps, { ...actions }),\r\n  withAuthRedirect\r\n)(Dialogs);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { AppStateType } from \"../redux/redux-store\";\r\n\r\nconst mapStateToPropsFroRedirect = (state: AppStateType) => ({\r\n  isAuth: state.auth.isAuth,\r\n});\r\ntype MapPropsType = {\r\n  isAuth: boolean;\r\n};\r\ntype DispatchPropsType = {};\r\nexport function withAuthRedirect<WCP extends JSX.IntrinsicAttributes>(\r\n  WrappedComponent: React.ComponentType<WCP>\r\n) {\r\n  const RedirectComponent: React.FC<\r\n    MapPropsType & DispatchPropsType\r\n  > = props => {\r\n    const { isAuth, ...restProps } = props;\r\n    if (!isAuth) return <Redirect to={\"/login\"} />;\r\n    return <WrappedComponent {...(restProps as WCP)} />;\r\n  };\r\n  const connectedAuthRedirectComponent = connect<\r\n    MapPropsType,\r\n    DispatchPropsType,\r\n    WCP,\r\n    AppStateType\r\n  >(\r\n    mapStateToPropsFroRedirect,\r\n    {}\r\n  )(RedirectComponent);\r\n  return connectedAuthRedirectComponent;\r\n}\r\n"],"names":["maxLength50","maxLenthCreator","reduxForm","form","props","_jsxs","onSubmit","handleSubmit","children","_jsx","createField","required","Textarea","className","s","dialog","active","NavLink","to","concat","id","name","message","state","dialogsPage","dialogsElements","dialogs","map","d","DialogItem","messagesElements","messages","m","Message","dialogsItems","AddMessageForm","values","sendMessage","newMessageBody","compose","connect","_objectSpread","actions","withAuthRedirect","Dialogs","mapStateToPropsFroRedirect","isAuth","auth","WrappedComponent","restProps","_objectWithoutProperties","_excluded","Redirect"],"sourceRoot":""}