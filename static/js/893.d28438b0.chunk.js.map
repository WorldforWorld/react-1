{"version":3,"file":"static/js/893.d28438b0.chunk.js","mappings":"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","sources":["components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","webpack://react-1/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://react-1/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","webpack://react-1/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["import { InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { required } from \"../../../../utils/validators/validators\";\r\nimport {\r\n  GetStringKeys,\r\n  Textarea,\r\n  createField,\r\n} from \"../../../common/FomsControls/FormsControls\";\r\n\r\ntype PropsType = {};\r\n\r\nexport type AddPostFormValuesType = {\r\n  newPostText: string;\r\n};\r\n\r\ntype AddPostFormValuesTypeKeys = GetStringKeys<AddPostFormValuesType>;\r\n\r\nlet AddNewPostForm: React.FC<\r\n  InjectedFormProps<AddPostFormValuesType, PropsType> & PropsType\r\n> = props => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        {createField<AddPostFormValuesTypeKeys>(\r\n          \"Post message\",\r\n          \"newPostText\",\r\n          [required],\r\n          Textarea\r\n        )}\r\n      </div>\r\n      <div>\r\n        <button>Add Post</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\nexport default reduxForm<AddPostFormValuesType, PropsType>({\r\n  form: \"profile-add-post\",\r\n})(AddNewPostForm);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__9ZCdZ\",\"posts\":\"MyPosts_posts__h7ZOW\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__lhgpN\"};","import classes from \"./Post.module.css\";\r\ntype PropsType = {\r\n  message: string;\r\n  likesCount: number;\r\n};\r\nconst Post: React.FC<PropsType> = props => {\r\n  return (\r\n    <div className={classes.item}>\r\n      <img src=\"https://w7.pngwing.com/pngs/340/946/png-transparent-avatar-user-computer-icons-software-developer-avatar-child-face-heroes-thumbnail.png\" />\r\n      {props.message}\r\n      <div>\r\n        <span>like</span> {props.likesCount}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Post;\r\n","import React from \"react\";\r\nimport { PostType } from \"../../../types/types\";\r\nimport AddPostForm, { AddPostFormValuesType } from \"./AddPostForm/AddPostForm\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nexport type MapPropsTypeMyPosts = {\r\n  posts: Array<PostType>;\r\n};\r\nexport type DispatchPropsTypeMyPosts = {\r\n  addPost: (newPostText: string) => void;\r\n};\r\nconst MyPosts: React.FC<\r\n  MapPropsTypeMyPosts & DispatchPropsTypeMyPosts\r\n> = props => {\r\n  const postsElements = [...props.posts]\r\n    .reverse()\r\n    .map(p => (\r\n      <Post message={p.message} likesCount={p.likesCount} key={p.id} />\r\n    ));\r\n  const onAddPost = (values: AddPostFormValuesType) => {\r\n    props.addPost(values.newPostText);\r\n  };\r\n  return (\r\n    <div className={s.postsBlock}>\r\n      <h3>My postst</h3>\r\n      <AddPostForm onSubmit={onAddPost} />\r\n      <div className={s.posts}>{postsElements}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst MyPostsMemorized = React.memo(MyPosts);\r\n\r\nexport default MyPostsMemorized;\r\n","import { connect } from \"react-redux\";\r\nimport { actions } from \"../../../redux/profile-reducer\";\r\nimport MyPosts, {\r\n  DispatchPropsTypeMyPosts,\r\n  MapPropsTypeMyPosts,\r\n} from \"./MyPosts\";\r\nimport { AppStateType } from \"../../../redux/redux-store\";\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n  };\r\n};\r\n\r\nconst MyPostsContainer = connect<\r\n  MapPropsTypeMyPosts,\r\n  DispatchPropsTypeMyPosts,\r\n  {},\r\n  AppStateType\r\n>(mapStateToProps, {\r\n  addPost: actions.addPostActionCreator,\r\n})(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__6-Eiz\",\"mainPhoto\":\"ProfileInfo_mainPhoto__8hJhm\",\"contact\":\"ProfileInfo_contact__s5uq5\"};","import { InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport {\r\n  GetStringKeys,\r\n  Input,\r\n  Textarea,\r\n  createField,\r\n} from \"../../common/FomsControls/FormsControls\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport { ProfileType } from \"../../../types/types\";\r\ntype PropsType = {\r\n  profile: ProfileType;\r\n};\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>;\r\nconst ProfileDataForm: React.FC<\r\n  InjectedFormProps<ProfileType, PropsType> & PropsType\r\n> = ({ handleSubmit, profile, error }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div>\r\n        <button>save</button>\r\n      </div>\r\n      {error && <div className={s.formSummaryError}>{error}</div>}\r\n      <div>\r\n        <b>Full name</b>:{\" \"}\r\n        {createField<ProfileTypeKeys>(\"Full name\", \"fullName\", [], Input)}\r\n      </div>\r\n      <div>\r\n        <b>Looking fro a job</b>:{\" \"}\r\n        {createField<ProfileTypeKeys>(\"\", \"lookingForAJob\", [], Input, {\r\n          type: \"checkbox\",\r\n        })}\r\n      </div>\r\n      <div>\r\n        <b>My professional skills</b> :\r\n        {createField<ProfileTypeKeys>(\r\n          \"My professional skills\",\r\n          \"lookingForAJobDescription\",\r\n          [],\r\n          Textarea\r\n        )}\r\n      </div>\r\n      <div>\r\n        <b>About me</b>:\r\n        {createField<ProfileTypeKeys>(\"About me\", \"aboutMe\", [], Textarea)}\r\n      </div>\r\n      <div>\r\n        <b>Contacts</b>:{\" \"}\r\n        {Object.keys(profile.contacts).map(key => {\r\n          return (\r\n            <div className={s.contact} key={key}>\r\n              {/* todo: create some solutin for embedded objects */}\r\n              <b>{key}</b>: {createField(key, \"contacts.\" + key, [], Input)}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\nconst ProfileDataFormRedux = reduxForm<ProfileType, PropsType>({\r\n  form: \"edit-profile\",\r\n})(ProfileDataForm);\r\nexport default ProfileDataFormRedux;\r\n","import React, { ChangeEvent, useEffect, useState } from \"react\";\r\ntype PropsType = {\r\n  status: string;\r\n  updateStatus: (status: string) => void;\r\n};\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = props => {\r\n  let [editMode, setEditMode] = useState(false);\r\n  let [status, setStatus] = useState(props.status);\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status);\r\n  }, [props.status]);\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n  };\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    props.updateStatus(status);\r\n  };\r\n  const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setStatus(e.currentTarget.value);\r\n  };\r\n  return (\r\n    <>\r\n      {!editMode && (\r\n        <div onDoubleClick={activateEditMode}>\r\n          <b>Status</b>: <span>{props.status || \"No status\"} </span>\r\n        </div>\r\n      )}\r\n      {editMode && (\r\n        <div>\r\n          <input\r\n            onChange={onStatusChange}\r\n            onBlur={deactivateEditMode}\r\n            autoFocus={true}\r\n            value={status}\r\n          />\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default ProfileStatusWithHooks;\r\n","import React, { ChangeEvent, useState } from \"react\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\nimport { ContactsType, ProfileType } from \"../../../types/types\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\ntype PropsType = {\r\n  profile: ProfileType | null;\r\n  status: string;\r\n  updateStatus: (status: string) => void;\r\n  isOwner: boolean;\r\n  savePhoto: (file: File) => void;\r\n  saveProfile: (profile: ProfileType) => Promise<any>;\r\n};\r\nconst ProfileInfo: React.FC<PropsType> = props => {\r\n  const [editMode, setEditMode] = useState(false);\r\n  if (!props.profile) {\r\n    return <Preloader />;\r\n  }\r\n  const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files?.length) {\r\n      props.savePhoto(e.target.files[0]);\r\n    }\r\n  };\r\n  const onSubmit = (formData: ProfileType) => {\r\n    // todo: remove then\r\n    props.saveProfile(formData).then(() => {\r\n      setEditMode(false);\r\n    });\r\n  };\r\n  return (\r\n    <div>\r\n      <div className={s.descriptionBlock}>\r\n        <img\r\n          src={props.profile.photos.large || userPhoto}\r\n          alt=\"photos\"\r\n          className={s.mainPhoto}\r\n        />\r\n        {props.isOwner && <input type=\"file\" onChange={onMainPhotoSelected} />}\r\n        {editMode ? (\r\n          <ProfileDataForm\r\n            initialValues={props.profile}\r\n            profile={props.profile}\r\n            onSubmit={onSubmit}\r\n          />\r\n        ) : (\r\n          <ProfileData\r\n            goToEditMode={() => {\r\n              setEditMode(true);\r\n            }}\r\n            profile={props.profile}\r\n            isOwner={props.isOwner}\r\n          />\r\n        )}\r\n        <ProfileStatusWithHooks\r\n          status={props.status}\r\n          updateStatus={props.updateStatus}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\ntype ProfileDataPropsType = {\r\n  profile: ProfileType;\r\n  isOwner: boolean;\r\n  goToEditMode: () => void;\r\n};\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({\r\n  profile,\r\n  isOwner,\r\n  goToEditMode,\r\n}) => {\r\n  return (\r\n    <div>\r\n      {isOwner && (\r\n        <div>\r\n          <button onClick={goToEditMode}>edit</button>\r\n        </div>\r\n      )}\r\n      <div>\r\n        <b>Full name</b>:{profile.fullName}\r\n      </div>\r\n      <div>\r\n        <b>Looking fro a job</b>:{profile.lookingForAJob ? \"yes\" : \"no\"}\r\n      </div>\r\n      {profile.lookingForAJob && (\r\n        <div>\r\n          <b>My professional skills</b> :{profile.lookingForAJobDescription}\r\n        </div>\r\n      )}\r\n      <div>\r\n        <b>About me</b>: {profile.aboutMe}\r\n      </div>\r\n      <div>\r\n        <b>Contacts</b>:{\" \"}\r\n        {Object.keys(profile.contacts).map(key => {\r\n          return (\r\n            <Contact\r\n              key={key}\r\n              contactTitle={key}\r\n              contactValue={profile.contacts[key as keyof ContactsType]}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\ntype ContactPropsType = {\r\n  contactValue: string;\r\n  contactTitle: string;\r\n};\r\nconst Contact: React.FC<ContactPropsType> = ({\r\n  contactTitle,\r\n  contactValue,\r\n}) => {\r\n  return (\r\n    <div className={s.contact}>\r\n      <b>{contactTitle}</b>: {contactValue}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileInfo;\r\n","import { ProfileType } from \"../../types/types\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\ntype PropsType = {\r\n  profile: ProfileType | null;\r\n  status: string;\r\n  updateStatus: (status: string) => void;\r\n  isOwner: boolean;\r\n  savePhoto: (file: File) => void;\r\n  saveProfile: (profile: ProfileType) => Promise<any>;\r\n};\r\nconst Profile: React.FC<PropsType> = props => {\r\n  return (\r\n    <div>\r\n      <ProfileInfo\r\n        isOwner={props.isOwner}\r\n        profile={props.profile}\r\n        status={props.status}\r\n        updateStatus={props.updateStatus}\r\n        savePhoto={props.savePhoto}\r\n        saveProfile={props.saveProfile}\r\n      />\r\n      <MyPostsContainer />\r\n    </div>\r\n  );\r\n};\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { RouteComponentProps, useParams } from \"react-router-dom\";\r\nimport { compose } from \"redux\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport {\r\n  getStatus,\r\n  getUserProfile,\r\n  savePhoto,\r\n  saveProfile,\r\n  updateStatus,\r\n} from \"../../redux/profile-reducer\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\nimport { ProfileType } from \"../../types/types\";\r\nimport Profile from \"./Profile\";\r\nexport function withRouter(Children: React.ComponentType) {\r\n  // @ts-ignore\r\n  return props => {\r\n    const match = { params: useParams() };\r\n    return <Children {...props} match={match} />;\r\n  };\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>;\r\n\r\ntype DispatchPropsType = {\r\n  getUserProfile: (userId: number) => void;\r\n  getStatus: (userId: number) => void;\r\n  updateStatus: (text: string) => void;\r\n  savePhoto: (file: File) => void;\r\n  saveProfile: (profile: ProfileType) => Promise<any>;\r\n};\r\n\r\ntype PathParamsType = {\r\n  userId: string;\r\n};\r\ntype PropsType = MapPropsType &\r\n  DispatchPropsType &\r\n  RouteComponentProps<PathParamsType>;\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n  refreshProfile() {\r\n    let userId: number | null = +this.props.match.params.userId;\r\n    if (!userId) {\r\n      userId = this.props.autorizedUserId;\r\n      if (!userId) {\r\n        // todo: may be raplace push with REdirect??\r\n        this.props.history.push(\"/login\");\r\n      }\r\n    }\r\n    if (!userId) {\r\n      console.error(\r\n        \"ID should exists in URI params or in state ('autorizedUserId')\"\r\n      );\r\n    } else {\r\n      this.props.getUserProfile(userId);\r\n      this.props.getStatus(userId);\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    this.refreshProfile();\r\n  }\r\n  componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n    if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n      this.refreshProfile();\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <Profile\r\n        {...this.props}\r\n        isOwner={!this.props.match.params.userId}\r\n        profile={this.props.profile}\r\n        status={this.props.status}\r\n        updateStatus={this.props.updateStatus}\r\n        savePhoto={this.props.savePhoto}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  autorizedUserId: state.auth.userId,\r\n  isAuth: state.auth.isAuth,\r\n});\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps, {\r\n    getUserProfile,\r\n    getStatus,\r\n    updateStatus,\r\n    savePhoto,\r\n    saveProfile,\r\n  }),\r\n  withRouter,\r\n  withAuthRedirect\r\n)(ProfileContainer);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { AppStateType } from \"../redux/redux-store\";\r\n\r\nconst mapStateToPropsFroRedirect = (state: AppStateType) => ({\r\n  isAuth: state.auth.isAuth,\r\n});\r\ntype MapPropsType = {\r\n  isAuth: boolean;\r\n};\r\ntype DispatchPropsType = {};\r\nexport function withAuthRedirect<WCP extends JSX.IntrinsicAttributes>(\r\n  WrappedComponent: React.ComponentType<WCP>\r\n) {\r\n  const RedirectComponent: React.FC<\r\n    MapPropsType & DispatchPropsType\r\n  > = props => {\r\n    const { isAuth, ...restProps } = props;\r\n    if (!isAuth) return <Redirect to={\"/login\"} />;\r\n    return <WrappedComponent {...(restProps as WCP)} />;\r\n  };\r\n  const connectedAuthRedirectComponent = connect<\r\n    MapPropsType,\r\n    DispatchPropsType,\r\n    WCP,\r\n    AppStateType\r\n  >(\r\n    mapStateToPropsFroRedirect,\r\n    {}\r\n  )(RedirectComponent);\r\n  return connectedAuthRedirectComponent;\r\n}\r\n"],"names":["reduxForm","form","props","_jsxs","onSubmit","handleSubmit","children","_jsx","createField","required","Textarea","className","classes","src","message","likesCount","MyPosts","postsElements","_toConsumableArray","posts","reverse","map","p","Post","id","s","AddPostForm","values","addPost","newPostText","React","connect","state","profilePage","actions","addPostActionCreator","_ref","profile","error","formSummaryError","Input","type","Object","keys","contacts","key","contact","_useState","useState","_useState2","_slicedToArray","editMode","setEditMode","_useState3","status","_useState4","setStatus","useEffect","_Fragment","onDoubleClick","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","_ref2","Preloader","descriptionBlock","photos","large","userPhoto","alt","mainPhoto","_e$target$files","target","files","length","savePhoto","ProfileDataForm","initialValues","formData","saveProfile","then","ProfileStatusWithHooks","ProfileInfo","MyPostsContainer","withRouter","Children","match","params","useParams","_objectSpread","ProfileContainer","_React$Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","userId","this","autorizedUserId","history","push","getUserProfile","getStatus","console","refreshProfile","prevProps","prevState","Profile","compose","auth","isAuth","withAuthRedirect","mapStateToPropsFroRedirect","WrappedComponent","restProps","_objectWithoutProperties","_excluded","Redirect","to"],"sourceRoot":""}